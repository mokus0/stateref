name:                   stateref
version:                0.2.1.1
stability:              provisional

cabal-version:          >= 1.2
build-type:             Simple

author:                 James Cook <mokus@deepbondi.net>
maintainer:             James Cook <mokus@deepbondi.net>

category:               Data
synopsis:               Abstraction for things that work like IORef.
description:            A collection of type-classes generalizing the
                        read\/write\/modify operations for stateful variables
                        provided by things like IORef, TVar, &c.

Flag useSTM
  Description:          Include instances for STM types
  Default:              True

Flag useTMVar
  Description:          Include instances for TMVar (TMVar not available
                        in hugs' stm implementation).  I have been unable to
                        make this flag's value depend on whether or not
                        you're running hugs, so if you are, you'll just have
                        to change it manually.  It'd sure be nice if there
                        were either an explicit backtrack command in cabal
                        or if 'buildable:false' would trigger a backtrack.
                        
                        Or if I could say "default: not(impl(hugs))"
  Default:              True

Flag haddockHack
  Description:          I don't much like this flag, but it's the only way
                        I've found so far (after literally _minutes_ of
                        exhaustive search!) of making haddock work.  It
                        triggers -DNotHADDOCK, which causes haddock not to
                        see a couple class instances upon which it otherwise
                        would choke (at version 0.9 anyway).  
                        
                        Slightly preferable would be -DHADDOCK when running
                        haddock.  I've found reference to a '--optghc' flag in
                        haddock, but it doesn't work in the version I've got
                        here, and there is also no convenient way to set in
                        from the .cabal file (there's no 'haddock-options'
                        directive, as far as I can tell).
                        
                        Note also that this triggers a warning in later
                        versions of cabal that it "should" be cpp-options
                        instead of ghc-options.  This is simply wrong.
                        The whole point is that ghc gets passed the flag
                        and haddock doesn't (which it would if cpp-options
                        were used).  On the other hand, when this hack
                        is active it also cuts the offending instances out
                        of a hugs build.
                        
  Default:              False

Library
  hs-source-dirs:       src
  extensions:           CPP
  
  exposed-modules:      Data.Accessor
                        Data.StateRef
                        Data.StateRef.Classes
                        Data.StateRef.Instances
                        Data.MRef
                        Data.MRef.Classes
                        Data.MRef.Instances
  other-modules:        Data.StateRef.Instances.Undecidable
  
  if flag(useSTM)
    other-modules:      Data.StateRef.Instances.STM
                        Data.MRef.Instances.STM
    cpp-options:        -DuseSTM
    
    if flag(useTMVar)
      cpp-options:      -DuseTMVar
      
      if impl(hugs)
        buildable:      False
  
  build-depends:        base, mtl
  if flag(useSTM)
    build-depends:      stm
  
  if flag(haddockHack)
    ghc-options:        -DNotHADDOCK
  else
    cpp-options:        -DNotHADDOCK
  